from aiogram import types, executor, Dispatcher, Bot
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, InputFile, MediaGroup, ParseMode
from datetime import datetime, timedelta, date
import sqlite3, time

API_TOKEN = '6605154512:AAEvQOY2iS9dgcE6HYcJdGdaU508rpFKEiA'


admin = 6130091130

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

feedback_messages = {}



db = sqlite3.connect('users.db')
sql = db.cursor()




@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):

    if message.from_user.id == admin:
        await message.answer("–û—Ç–ª–∏—á–Ω–æ, –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!")
        while True:
            dt_now = date.today()
            date_passed = dt_now - timedelta(days=0)
            for id in sql.execute(f"SELECT ID FROM users WHERE DATE='{date_passed}' "):
                await bot.send_message(id[0], '–ü—Ä–∏–≤–µ—Ç, –∫—Ä–∞—Å–æ—Ç–∫–∞! \n\n–ö–∞–∫ —Ç–µ–±–µ –Ω–∞—à–∞ —é–±–∫–∞? –í—Å–µ –ª–∏ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å? \n\n\n–ú—ã —Ö–æ—Ç–∏–º –ø–æ–¥–∞—Ä–∏—Ç—å —Ç–µ–±–µ –ø—Ä–∏—è—Ç–Ω—ã–π –±–æ–Ω—É—Åüí∏ \n–ú–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –Ω–∞ Wildberries –æ –Ω–∞—à–µ–π —é–±–∫–µ.\n–ó–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤ - –ø–µ—Ä–µ–≤–µ–¥–µ–º 100 —Ä—É–±–ª–µ–π –Ω–∞ —Ç–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∑–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤ —Å —Ñ–æ—Ç–æ - 150 —Ä—É–±–ª–µ–π. \n\n–ü–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞ –ø—Ä–∏—Å—ã–ª–∞–π —Å–∫—Ä–∏–Ω –∏ –º—ã —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–∏–º –±–æ–Ω—É—Åü•∞üí∏')
            time.sleep(86400)
                



    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn = types.KeyboardButton(text=f'–ú–µ–Ω—é')
        keyboard.add(btn)

        sql.execute(f"INSERT INTO users (ID) VALUES ({message.from_user.id})")
        sql.execute(f"UPDATE users SET DATE='{date.today()}' WHERE ID={message.from_user.id}")
        db.commit()

        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç, –ö—Ä–∞—Å–∞–≤–∏—Ü–∞! –°–ø–∞—Å–∏–±–æ —Ç–µ–±–µ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–π —é–±–∫–∏. –ú—ã —É–≤–µ—Ä–µ–Ω—ã, –æ–Ω–∞ —Ç–µ–±–µ –æ—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è, "
            "–ø—Ä–∏–Ω–µ—Å–µ—Ç —Ç–µ–±–µ –º–Ω–æ–≥–æ —Ä–∞–¥–æ—Å—Ç–Ω—ã—Ö —ç–º–æ—Ü–∏–π –∏ –æ—Ç–ª–∏—á–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç —Ç–≤–æ–π –≥–∞—Ä–¥–µ—Ä–æ–±!",
            reply_markup=keyboard
        )

        await message.answer("–ö–∞–∫–æ–π —É —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å?", reply_markup=get_main_menu())

@dp.message_handler()
async def start_command(message: types.Message):
    msg = message.text

    if msg == '–ú–µ–Ω—é':
        await message.answer("–ú–µ–Ω—é: ", reply_markup=get_main_menu())


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'feedback')
async def feedback_callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.answer_callback_query(callback_query.id)
    await bot.delete_message(user_id, callback_query.message.message_id)
    feedback_messages[user_id] = {'question': "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"}
    keyboard = types.InlineKeyboardMarkup()
    ikback = types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='back')
    keyboard.add(ikback)
    await bot.send_message(user_id, "<b>–ú—ã —Ç–µ–±—è –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞–µ–º :)</b>\n\n<i>–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.</i>", parse_mode=ParseMode.HTML, reply_markup=keyboard)


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'lottery')
async def lottery_callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.answer_callback_query(callback_query.id)
    await bot.delete_message(user_id, callback_query.message.message_id)
    await bot.send_message(user_id, "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —É—Å–ª–æ–≤–∏—è:\n1)–ø–µ—Ä–µ–π—Ç–∏ –∏ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª https://t.me/duobelan (–≤ –¥–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–º –∫–æ–Ω–∫—É—Ä—Å–∞ –∏ –≤ –Ω–µ–º –∂–µ –º—ã –≤—ã–±–µ—Ä–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è)\n2)–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ —Å —Ñ–æ—Ç–æ (‚ùóÔ∏è–∫—Ä–∏—Ç–µ—Ä–∏–∏ –∫ ¬†–æ—Ç–∑—ã–≤—É: —é–±–∫—É –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ –ø—Ä–∏–º–µ—Ä–∏—Ç—å –Ω–∞ —Å–µ–±–µ –∏ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å) –∏ –ø—Ä–∏—Å–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç @duo_belan\n–í—Å–µ–≥–æ 2 –ø—Ä–æ—Å—Ç—ã—Ö —É—Å–ª–æ–≤–∏—è, —á—Ç–æ–±—ã –≤—ã–∏–≥—Ä–∞—Ç—å –ø–æ—Ö–æ–¥ –≤ Spa-–∫–æ–º–ø–ª–µ–∫—Å –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ ü•∞\n\n–í—ã–±–∏—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –º—ã –±—É–¥–µ–º —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞ https://t.me/duobelan —Å –ø–æ–º–æ—â—å—é –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª RandStuff.\n–ò—Ç–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞ –ø–æ–¥–≤–µ–¥–µ–º 31.12.\n–ñ–µ–ª–∞–µ–º —Ç–µ–±–µ —É–¥–∞—á–∏ ü§ûüèº‚ù§Ô∏è\n\n –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –≤–µ—Ä–Ω–∏—Å—å –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é –∏ –Ω–∞–∂–º–∏ '–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", reply_markup=get_back_inline_keyboard())
    


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'care')
async def care_callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.answer_callback_query(callback_query.id)
    await bot.delete_message(user_id, callback_query.message.message_id)
    await bot.send_message(user_id, "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É –∑–∞ —é–±–∫–æ–π:\n\n1)–ü–µ—Ä–µ–¥ —Å—Ç–∏—Ä–∫–æ–π —Å–Ω—è—Ç—å –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –≤—ã–≤–µ—Ä–Ω—É—Ç—å –≤–µ—â—å, –∑–∞—Å—Ç–µ–≥–Ω—É—Ç—å –º–æ–ª–Ω–∏—é.\n2)–°—Ç–∏—Ä–∞—Ç—å –≤ –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ–π –≤–æ–¥–µ –ø—Ä–∏ 30 ¬∞C.\n3)–í—ã–±—Ä–∞—Ç—å –¥–µ–ª–∏–∫–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º.\n4)–ü—Ä–∏–º–µ–Ω—è—Ç—å –∂–∏–¥–∫–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ –¥–ª—è —Å—Ç–∏—Ä–∫–∏.\n5)–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∏—Ä–∞–ª—å–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ ‚Äì –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ, –∏–Ω–∞—á–µ –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –º–æ–≥—É—Ç –æ–±—Ä–∞–∑–æ–≤–∞—Ç—å—Å—è –±–µ–ª—ã–µ —Ä–∞–∑–≤–æ–¥—ã.\n6)–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é —Ö–∏–º–∏—é, –≤ —Ç–æ–º —á–∏—Å–ª–µ –∏ —Ö–ª–æ—Ä—Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞.\n7)–ù–µ –ø–æ–¥–≤–µ—Ä–≥–∞—Ç—å —Å–∏–ª—å–Ω–æ–º—É –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–æ–º—É –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—é: –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–æ—Ä–æ—Ç–æ–≤, –Ω–µ –≤—ã–∫—Ä—É—á–∏–≤–∞—Ç—å, –Ω–µ —Ç—è–Ω—É—Ç—å –∏ –Ω–µ —Å–∂–∏–º–∞—Ç—å.\n8)–ü–æ—Å–ª–µ —Å—Ç–∏—Ä–∫–∏ –¥–∞—Ç—å –≤–æ–¥–µ —Å—Ç–µ—á—å, –ø–æ–≤–µ—Å–∏—Ç—å –Ω–∞ –ø–ª–µ—á–∏–∫–∏, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É ‚Äì –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –¥–µ—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑–¥–µ–ª–∏—è.\n9)–ù–µ–±–æ–ª—å—à–∏–µ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è –ø—Ä–æ—Ç–∏—Ä–∞—Ç—å —Å–∞–ª—Ñ–µ—Ç–∫–æ–π, —Å–ª–µ–≥–∫–∞ —Å–º–æ—á–µ–Ω–Ω–æ–π –≤–æ–¥–æ–π –∏–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–æ–º –¥–ª—è —Å—Ç–∏—Ä–∫–∏.\n10)–•—Ä–∞–Ω–∏—Ç—å –≤–µ—â—å —Ç–æ–ª—å–∫–æ –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏ –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –∑–∞–ª–æ–º–æ–≤.\n\n–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –≤–µ—Ä–Ω–∏—Å—å –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é –∏ –Ω–∞–∂–º–∏ '–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", reply_markup=get_back_inline_keyboard())



@dp.callback_query_handler(lambda callback_query: callback_query.data == 'support')
async def support_callback_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.answer_callback_query(callback_query.id)
    await bot.delete_message(user_id, callback_query.message.message_id)
    await bot.send_message(user_id, "<b>–ú—ã —Ç–µ–±—è –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞–µ–º)</b> \n\n<i>–ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?</i>", parse_mode=ParseMode.HTML, reply_markup=get_back_inline_keyboard())
    feedback_messages[user_id] = {'question': "–°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"}


@dp.callback_query_handler(text='back')
async def CheckMessage(message: types.CallbackQuery):
        await bot.delete_message(message.from_user.id, message.message.message_id)
        await bot.send_message(message.from_user.id, "–ö–∞–∫–æ–π —É —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å?", reply_markup=get_main_menu())

def get_main_menu():
    keyboard = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(text="–•–æ—á—É –æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å üíå", callback_data="feedback")
    button2 = types.InlineKeyboardButton(text="–•–æ—á—É —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ üéÅ", callback_data="lottery")
    button3 = types.InlineKeyboardButton(text="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É –∑–∞ —é–±–∫–æ–π ‚úÖ", callback_data="care")
    button4 = types.InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π üí¨", callback_data="support")

    keyboard.add(button1)
    keyboard.add(button2)
    keyboard.add(button3)
    keyboard.add(button4)

    return keyboard


def get_back_inline_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")
    keyboard.add(button)
    return keyboard


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'back')
async def back_inline_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(user_id, "–ö–∞–∫–æ–π —É —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å?", reply_markup=get_main_menu())


@dp.message_handler(lambda message: message.from_user.id in feedback_messages)
async def handle_feedback(message: types.Message):
    user_id = message.from_user.id
    feedback_type = feedback_messages[user_id]['question']
    del feedback_messages[user_id]  # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏

    admin_id = 6510879921
    await bot.send_message(admin_id, f"{feedback_type} –æ—Ç @{message.from_user.username}:\n{message.text}",
                           reply_markup=get_reply_inline_keyboard(user_id))
    await bot.send_message(user_id, f"–ú—ã –ø—Ä–∏–Ω—è–ª–∏ —Ç–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –û—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è",
                           reply_markup=get_back_inline_keyboard())


def get_reply_inline_keyboard(user_id):
    keyboard = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user_id}")
    keyboard.add(button)
    return keyboard


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('reply_'))
async def reply_inline_handler(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split('_')[1])
    await bot.answer_callback_query(callback_query.id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç
    admin_id = 6510879921  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π ID –≤–∞—à–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await bot.send_message(admin_id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç:")

    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–≤–µ—Ç–∏—Ç—å" –∏ –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                message_id=callback_query.message.message_id,
                                text=callback_query.message.text + "\n\n–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
                                reply_markup=None)

    # –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    async def reply_handler(msg: types.Message):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if msg.from_user.id == admin_id:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.send_message(user_id, f"–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {msg.text}")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞
            await bot.send_message(admin_id, "–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            dp.message_handlers.unregister(reply_handler)(reply_handler)
        else:
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ—Å–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–≤–µ—á–∞—Ç—å
            await bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    dp.message_handlers.register(reply_handler)


if __name__ == '__main__':
    executor.start_polling(dp)